@startuml
skinparam shadowing false
skinparam DatabaseBackgroundColor white
skinparam DatabaseBorderColor #2688d4
skinparam QueueBackgroundColor white
skinparam QueueBorderColor #2688d4
skinparam NoteBackgroundColor white
skinparam NoteBorderColor #2688d4
skinparam sequence {
    ArrowColor #2688d4
    ActorBorderColor #2688d4
    LifeLineBorderColor #2688d4
    ParticipantBorderColor #2688d4
    ParticipantBackgroundColor white
    BoxBorderColor #2688d4
    BoxBackgroundColor white
}

queue "'user-notifications'\n Kafka Topic" as user_notifications_kafka_topic

box "Сервіс відправки повідомлень"
  participant "Notification \nEvent Subscriber" as notification_kafka_subscriber
  participant "Notification \nService" as notification_service
  participant "Channel Notification \nValidators" as notification_channel_validators
  participant "Channel Notification \nProducers" as notification_channel_producers
  participant "Notification \nTemplate Service" as notification_template_service
  participant "Channel Notification \nPublishers" as channel_notification_publishers
end box

participant "Сервіс \nналаштувань користувачів" as user_settings_service
participant "Сервіс управління \nкористувачами та доступом" as keycloak
participant "Сервіс логування" as logging_service
database "Сховище \nшаблонів" as template_db

queue "'user-notifications.DLT'\n Kafka Topic" as user_notifications_dlt_kafka_topic
queue "'*-channel-notification'\n Kafka Topic" as channel_notification_topics

== Відправка повідомлень за преференціями користувача ==
alt Відправка повідомлення
notification_kafka_subscriber -> user_notifications_kafka_topic: Зчитування події
    note left
      {
        "context": {
          "system": "Low-code Platform",
          "application": "<bpms.app.name>",
          "businessProcess": "<optional>",
          "businessProcessDefinitionId": "<optional>",
          "businessProcessInstanceId": "<optional>",
          "businessActivity": "<optional>",
          "businessActivityInstanceId": "<optional>"
        },
        "notification": {
          "templateName": "<notification template unique name>"
        },
        "recipients": [
          {
            "id": "<Ідентифікатор користувача>",
            "parameters": [
              {
                  "key": "<key>",
                  "value": "<value>"
              }
            ]
          }
        ]
      }
    end note
activate notification_kafka_subscriber
notification_kafka_subscriber -> notification_service: Відправка повідомлення \nкористувачу <recipient>
activate notification_service
  notification_service -> user_settings_service: Читання налаштувань користувача \n(**username = <recipient>**)
  user_settings_service --> notification_service: Обрані канали зв'язку з їх налаштуваннями
  notification_service -> keycloak: Читання атрибутів користувача
  keycloak --> notification_service: Атрибути користувача: РНОКПП, тощо.
  notification_service -> notification_service: Визначення каналів зв'язку (**channel**)
  loop Обробка повідомлення для кожного каналу зв'язку
  notification_service -> notification_channel_validators: Валідація повідомлення
  alt Помилка валідації
    notification_channel_validators -> logging_service: Логування помилки
  end
  notification_channel_validators --> notification_service
  notification_service -> notification_template_service: Запит на отримання шаблону для каналу зв'язку \n(у випадку з diia - створення шаблону)
  notification_template_service -> template_db: Отримання шаблону
  template_db --> notification_template_service
  notification_template_service --> notification_service
  notification_service -> notification_channel_producers: Створення повідомлення для каналу зв'язку
  notification_channel_producers --> notification_service: Повідомлення для каналів зв'язку
  alt Помилка створення повідомлення з шаблону і моделі
    notification_service -> logging_service: Логування помилки
  end
  end
  notification_service -> channel_notification_publishers: Запит на відправку повідомлень до каналів зв'язку
  channel_notification_publishers -> channel_notification_topics: Публікація в топік каналу зв'язку
  notification_kafka_subscriber --> user_notifications_kafka_topic: Подію опрацьовано
else Повідомлення не оброблене
  notification_service -> logging_service: Логування помилки
  notification_service -> user_notifications_dlt_kafka_topic: Збереження повідомлення до Dead-Letter Topic
  user_notifications_dlt_kafka_topic --> notification_service
  notification_kafka_subscriber --> user_notifications_kafka_topic: Подію опрацьовано
end
deactivate notification_service
deactivate notification_kafka_subscriber

== Відправка повідомлень за визначеним каналом ==

alt Відправка повідомлення
notification_kafka_subscriber -> user_notifications_kafka_topic: Зчитування події
    note left
     {
       "context": {
         "system": "Low-code Platform",
         "application": "<upstream-service>",
       },
       "notification": {
         "templateName": "{notificationTemplate}"
       },
       "recipients": [
         {
            "id": "<user id - optional>",
            "channels": [
              {
                "channel": "email",
                "email": "<Email користувача>"
              }
            ],
            "parameters": [
              {
                  "key": "<key>",
                  "value": "<value>"
              }
            ]
         }
       ]
     }
    end note
activate notification_kafka_subscriber
notification_kafka_subscriber -> notification_service: Відправка повідомлення користувачу \nза інформацією з **channel**
activate notification_service
  notification_service -> notification_channel_validators: Валідація повідомлення
  notification_channel_validators --> notification_service
    alt У разі помилки валідації по каналу
      notification_channel_validators --> logging_service
    end
  notification_service -> notification_template_service: Отримання шаблону для каналу зв'язку \n(у випадку з diia - створення шаблону)
  notification_template_service -> template_db: Отримання шаблону (для diia -\nзбереження + отримання)
  template_db --> notification_template_service
  notification_template_service --> notification_service
  notification_service -> notification_channel_producers: Створення повідомлення для каналу зв'язку
  notification_channel_producers --> notification_service: Повідомлення для каналу зв'язку
    alt У разі помилки при створенні повідомлення з шаблону
      notification_service --> logging_service
    end
  notification_service -> channel_notification_publishers: Запит на відправку повідомлення до каналу зв'язку
  channel_notification_publishers -> channel_notification_topics: Публікація в топік каналу зв'язку
  notification_kafka_subscriber --> user_notifications_kafka_topic: Подію опрацьовано
else Повідомлення не оброблене
  notification_service -> logging_service: Логування помилки
  notification_service -> user_notifications_dlt_kafka_topic: Збереження повідомлення до Dead-Letter Topic
  user_notifications_dlt_kafka_topic --> notification_service
  notification_kafka_subscriber --> user_notifications_kafka_topic: Подію опрацьовано
end
deactivate notification_service
deactivate notification_kafka_subscriber
@enduml
