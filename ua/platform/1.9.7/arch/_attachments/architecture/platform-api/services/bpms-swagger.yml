openapi: 3.0.1
info:
  title: "Business-process-management-service REST API"
  description: "OpenApi Spec for Business-process management service REST API. Contains Camunda REST API and extended Business-process management service API."
  version: "Camunda version 7.16.0"
servers:
  - url: "/api"
    description: "The API server for the default process engine"
  - url: "{url}"
    description: "The API server with a custom url"
    variables:
      url:
        default: ""
paths:
  /extended/authorizations/process-instance/create:
    post:
      operationId: createProcessInstanceAuthorizations
      summary: Create authorizations for process instances.
      description: |
        ### Endpoint purpose
        The purpose of the endpoint is to create authorizations for list of roles to be able to create [process instances](https://docs.camunda.org/manual/7.16/user-guide/process-engine/process-engine-concepts/#process-instances). It takes a list of group names as input and creates authorizations for those groups and returns the count of created authorizations.
        
        Created authorizations are [Camunda Process-Instance authorizations](https://docs.camunda.org/manual/7.16/webapps/admin/authorization-management/) with permissions `CREATE` and resource id `'*'`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: List of group names
              example: ["officer", "citizen", "custom-registry-role"]
              items:
                type: string
                description: Not empty group name
                example: "custom-registry-role"
                nullable: false
                minLength: 1
            example: ["officer", "citizen", "custom-registry-role"]
      responses:
        '200':
          description: Authorizations created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdmCountResultDto'
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended authorizations

  /extended/authorizations/process-definition/create:
    post:
      operationId: createProcessDefinitionAuthorizations
      summary: Create authorizations for process definitions.
      description: |
        ### Endpoint purpose
        The purpose of the endpoint is to create a list of authorizations for role for exact [process definition](https://docs.camunda.org/manual/7.16/user-guide/process-engine/process-engine-concepts/#process-definitions) to be able to read them and create instances of these processes. It takes a list of pairs group&nbsp;name/process&nbsp;definition&nbsp;key as input and creates authorizations for them and returns the count of created authorizations.
        
        Created authorizations are [Camunda Process-Definition authorizations](https://docs.camunda.org/manual/7.16/webapps/admin/authorization-management/) with permissions `READ,CREATE_INSTANCE`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DdmProcessDefinitionAuthDto'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdmCountResultDto'
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended authorizations

  /extended/authorizations/delete:
    delete:
      summary: Delete authorizations for process instances and process definitions.
      description: |
        ### Endpoint purpose
        The purpose of the endpoint is to delete all created authorizations created by [/extended/authorizations/process-instance/create](#Extended%20authorizations/createProcessInstanceAuthorizations) and [/extended/authorizations/process-definition/create](#Extended%20authorizations/createProcessDefinitionAuthorizations) at once.
        
        It returns the count of deleted authorizations.
        
        __*WARNING:*__ If there are any authorizations that match the endpoint search criteria and were created _manually_ or with a _different endpoint_, they will be __deleted__ as well. This applies to process definitions with permissions `READ, CREATE_INSTANCE` and to process instances with `CREATE` permission and resource ID `'*'`.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdmCountResultDto'
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended authorizations

  /extended/process-definition/key/{key}:
    get:
      summary: Get process definition by key.
      description: |
        ### Endpoint purpose
        The purpose of the endpoint is to retrieve a [process definition](https://docs.camunda.org/manual/7.16/user-guide/process-engine/process-engine-concepts/#process-definitions) object by its key with start-form. 
        
        This endpoint was created to join Camunda [get process definition endpoint](https://docs.camunda.org/manual/7.16/reference/rest/process-definition/get/) and [get start form key endpoint](https://docs.camunda.org/manual/7.16/reference/rest/process-definition/get-start-form-key/).
        
        It takes the key as a path parameter and returns the corresponding process definition object with it's start form key if present.
      parameters:
        - in: path
          name: key
          required: true
          description: Unique process definition key
          schema:
            type: string
            example: awesome-process-definition
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdmProcessDefinitionDto'
        '404':
          description: Business process not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
              example: |
                { 
                  "traceId": "ac3bee6c5cdb10142947264715dd5559", 
                  "code": "RestException", 
                  "message": "No matching process definition with key: awesome-process-definition and no tenant-id", 
                  "localizedMessage": "No matching process definition with key: awesome-process-definition and no tenant-id" 
                }
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended Process Definition

  /extended/process-definition:
    post:
      summary: Search process definitions by params.
      description: |
        ### Endpoint purpose
        The purpose of the endpoint is to search a [process definition](https://docs.camunda.org/manual/7.16/user-guide/process-engine/process-engine-concepts/#process-definitions) objects by search parameters.
        
        This endpoint was created to join Camunda [get process definition list endpoint](https://docs.camunda.org/manual/7.16/reference/rest/process-definition/get-query/) and [get start form key endpoint](https://docs.camunda.org/manual/7.16/reference/rest/process-definition/get-start-form-key/) in complex POST method with limited query parameters that won't have query size restrictions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessDefinitionQueryDto'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DdmProcessDefinitionDto'
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended Process Definition

  /extended/task:
    post:
      operationId: getByParams
      summary: Get list of user tasks by provided query params
      description: |
        ### Endpoint purpose
        The purpose of the endpoint is to search a [user tasks](https://docs.camunda.org/manual/7.16/reference/bpmn20/tasks/user-task/) objects by search parameters.
        
        This endpoint was created to extend Camunda [get task list endpoint](https://docs.camunda.org/manual/7.16/reference/rest/task/get-query/) with returning process definition name and business key with task info.
        
        Request has same structure as Camunda [get task list endpoint](https://docs.camunda.org/manual/7.16/reference/rest/task/get-query/).
      parameters:
        - in: query
          name: firstResult
          description: Defines how many tasks will be skipped
          required: false
          schema:
            type: integer
            example: 20
        - in: query
          description: Defines how many tasks will be returned
          name: maxResults
          required: false
          schema:
            type: integer
            example: 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskQueryDto'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DdmTaskDto'
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended Task

  /extended/task/lightweight:
    post:
      summary: Method for getting list of lightweight Camunda user tasks
      description: 'Lightweight version of [/extended/task](#Extended%20task/getByParams) endpoint that returns only task id and its assignee.'
      parameters:
        - in: query
          name: firstResult
          description: Defines how many tasks will be skipped
          required: false
          schema:
            type: integer
            example: 20
        - in: query
          description: Defines how many tasks will be returned
          name: maxResults
          required: false
          schema:
            type: integer
            example: 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DdmTaskQueryDto'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DdmLightweightTaskDto'
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended Task

  /extended/task/{id}:
    get:
      summary: Method for getting extended camunda user task
      description:  |
        ### Endpoint purpose
        The purpose of the endpoint is to get a [user task](https://docs.camunda.org/manual/7.16/reference/bpmn20/tasks/user-task/) object by id.
        
        This endpoint was created to extend Camunda [get task endpoint](https://docs.camunda.org/manual/7.16/reference/rest/task/get/) with returning process definition name, id of a root process instance, indicator if that task is signable, signature validation pack and business process form variables with task info.
      parameters:
        - name: id
          description: Unique identificator of a task
          in: path
          example: fa1fdc6e-361a-4236-8d9e-a7ce126a03a5
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdmSignableTaskDto'
        '404':
          description: Task not found
          content:
            application/json:
              example: |
                {
                  "type": "RestException",
                  "message": "No matching task with id fa1fdc6e-361a-4236-8d9e-a7ce126a03a5"
                }
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended Task

  /extended/task/{id}/complete:
    post:
      summary: Complete user task by ID
      description: |
        ### Endpoint purpose
        The purpose of the endpoint is to complete a [user task](https://docs.camunda.org/manual/7.16/reference/bpmn20/tasks/user-task/) by id.
        
        This endpoint was created to extend Camunda [complete task endpoint](https://docs.camunda.org/manual/7.16/reference/rest/task/post-complete/) with returning root process instance id and whether the root process instance has ended.
      operationId: completeTaskById
      parameters:
        - name: id
          description: Unique identificator of a task
          in: path
          example: fa1fdc6e-361a-4236-8d9e-a7ce126a03a5
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DdmCompleteTaskDto'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdmCompletedTaskDto'
        '404':
          description: Task not found
          content:
            application/json:
              example: |
                {
                  "type": "RestException",
                  "message": "No matching task with id fa1fdc6e-361a-4236-8d9e-a7ce126a03a5"
                }
        '422':
          description: Client validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientValidationException'
        '500':
          $ref: '#/components/responses/SystemError'
      tags:
        - Extended Task

components:
  responses:
    Unauthenticated:
      description: Unauthenticated
    Unauthorized:
      description: Unauthorized
    SystemError:
      description: Some system error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
  schemas:
    DdmProcessDefinitionDto:
      type: object
      description: DTO that represents the process definition resource
      properties:
        id:
          type: string
          example: awesome-process-definition:5:9b1d903c-51bc-41b0-b5bc-360362e0d7cb
          nullable: false
          description: The ID of the specific version of business-process.
        key:
          type: string
          example: awesome-process-definition
          nullable: false
          description: The ID of the specific business-process. It is same for all versions of the business-process.
        name:
          type: string
          example: Awesome process definition
          nullable: false
          description: Human readable name of business process definition. Unlike base Camunda, the name cannot be null.
        suspended:
          type: boolean
          example: false
          nullable: false
          description: Flag that indicates whether this business process is suspended for starting process instances.
        formKey:
          type: string
          example: awesome-process-definition-start-form-key
          nullable: true
          description: Key of the process definition start form. Can be null if business process doesn't require start form.

    DdmProcessDefinitionAuthDto:
      type: object
      description: DTO that represents the pair of a group and process-definition for which an authorization is required to be created.
      properties:
        groupId:
          type: string
          description: Not empty group name
          example: "custom-registry-role"
          nullable: false
          minLength: 1
        processDefinitionId:
          type: string
          nullable: false
          description: Process-definition key.
          example: "awesome-business-process"

    DdmCountResultDto:
      type: object
      description: DTO that represents the result of a count operation.
      example: {"count": 42}
      properties:
        count:
          type: number
          minimum: 0
          description: Result count of entities
          example: 42

    ProcessDefinitionQueryDto:
      type: object
      description: DTO that represents the set of query parameters for searching process definitions.
      properties:
        active:
          type: boolean
          example: true
          nullable: true
          default: false
          description: |
            Flag that indicates that it's needed to search only active process definitions (suspension state = ACTIVE).
            
            NOTE: If suspended flag is set to true then this flag is ignored.
        latestVersion:
          type: boolean
          example: true
          nullable: true
          default: false
          description: |
            Flag that indicates that it's needed to search only latest versions of the process definitions for each process definition key.
            
            NOTE: Cannot be used with processDefinitionId.
        processDefinitionId:
          type: string
          example: awesome-process-definition:5:9b1d903c-51bc-41b0-b5bc-360362e0d7cb
          nullable: true
          default: null
          description: |
            Specifies the ID of the process definition specific version to retrieve. Can be null.
            
            NOTE: Cannot be used with latestVersion. And shouldn't be used with processDefinitionIdIn.
        processDefinitionIdIn:
          type: array
          example: ["awesome-process-definition:5:9b1d903c-51bc-41b0-b5bc-360362e0d7cb", "awesome-process-definition:4:0c7ee46d-7e43-46c2-b440-6b30b2267a6a"]
          nullable: true
          default: null
          description: |
            Specifies an array of process definition IDs to retrieve. Can be null. Ignored if empty array is set.
            
            NOTE: Shouldn't be used with processDefinitionId as conflict search criteria.
          items:
            type: string
        sortBy:
          type: string
          example: name
          nullable: true
          default: null
          description: Specifies the field to sort the process definitions by. Can be null.
          enum:
            - "category"
            - "key"
            - "id"
            - "name"
            - "version"
            - "deploymentId"
            - "deployTime"
            - "tenantId"
            - "versionTag"
            - null
        sortOrder:
          type: string
          example: asc
          nullable: true
          default: null
          description: Specifies the order in which the process definitions should be sorted. Can be null. Cannot work without sortBy.
          enum:
            - asc
            - desc
            - null
        suspended:
          type: boolean
          example: false
          nullable: true
          default: false
          description: |
            Flag that indicates that it's needed to search only suspended process definitions (suspension state = SUSPENDED).
            
            NOTE: If this flag is set to true then active flag is ignored.

    DdmTaskDto:
      type: object
      description: DTO that represents task resource along with process definition name and process instance business key
      properties:
        id:
          type: string
          example: 9402afe5-ce88-4af4-be0b-5035bbe47722
          nullable: false
          description: Represents the unique identifier of the task.
        taskDefinitionKey:
          type: string
          example: awesome-task-definition
          nullable: false
          description: Represents the key of the task's definition in business process.
        name:
          type: string
          example: Awesome task definition
          nullable: false
          description: Represents the human readable name of the task.
        assignee:
          type: string
          example: some_username
          nullable: true
          description: Represents the username of a user that assigned to the task.
        created:
          type: string
          format: date-time
          nullable: false
          description: Represents the date and time when the task was created.
        description:
          type: string
          example: Task that assigned to business process initiator
          nullable: true
          description: Represents the description of the task.
        processDefinitionName:
          type: string
          example: Awesome process definition
          nullable: false
          description: Represents the human readable name of the process definition associated with the task.
        processInstanceId:
          type: string
          example: 31b15466-2743-438a-b4cb-fa1a7d1478e9
          nullable: false
          description: Represents the unique identifier of the process instance associated with the task.
        processDefinitionId:
          type: string
          example: awesome-process-definition:5:9b1d903c-51bc-41b0-b5bc-360362e0d7cb
          nullable: false
          description: Represents the unique identifier of the process definition associated with the task.
        formKey:
          type: string
          example: awesome-task-form
          nullable: false
          description: Represents the form key associated with the task.
        suspended:
          type: boolean
          example: false
          nullable: false
          description: Represents the status of the task (suspended or not).
        businessKey:
          type: string
          example: null
          nullable: true
          description: Represents the business key of the process instance associated with the task.


    TaskQueryDto:
      type: object
      properties:
        processInstanceId:
          type: string
          description: Restrict to tasks that belong to process instances with the given
            id.
          nullable: true
        processInstanceIdIn:
          type: array
          description: Restrict to tasks that belong to process instances with the given
            ids.
          nullable: true
          items:
            type: string
        processInstanceBusinessKey:
          type: string
          description: Restrict to tasks that belong to process instances with the given
            business key.
          nullable: true
        processInstanceBusinessKeyExpression:
          type: string
          description: "Restrict to tasks that belong to process instances with the given
            business key which \nis described by an expression. See the \n[user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)\n for
            more information on available functions."
          nullable: true
        processInstanceBusinessKeyIn:
          type: array
          description: "Restrict to tasks that belong to process instances with one of
            the give business keys. \nThe keys need to be in a comma-separated list."
          nullable: true
          items:
            type: string
        processInstanceBusinessKeyLike:
          type: string
          description: "Restrict to tasks that have a process instance business key that
            has the parameter \n value as a substring."
          nullable: true
        processInstanceBusinessKeyLikeExpression:
          type: string
          description: "Restrict to tasks that have a process instance business key that
            has the parameter \n value as a substring and is described by an expression.
            See the\n[user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            \n for more information on available functions."
          nullable: true
        processDefinitionId:
          type: string
          description: Restrict to tasks that belong to a process definition with the
            given id.
          nullable: true
        processDefinitionKey:
          type: string
          description: Restrict to tasks that belong to a process definition with the
            given key.
          nullable: true
        processDefinitionKeyIn:
          type: array
          description: "Restrict to tasks that belong to a process definition with one
            of the given keys. The \n keys need to be in a comma-separated list."
          nullable: true
          items:
            type: string
        processDefinitionName:
          type: string
          description: Restrict to tasks that belong to a process definition with the
            given name.
          nullable: true
        processDefinitionNameLike:
          type: string
          description: "Restrict to tasks that have a process definition name that has
            the parameter value as \na substring."
          nullable: true
        executionId:
          type: string
          description: Restrict to tasks that belong to an execution with the given id.
          nullable: true
        caseInstanceId:
          type: string
          description: Restrict to tasks that belong to case instances with the given
            id.
          nullable: true
        caseInstanceBusinessKey:
          type: string
          description: Restrict to tasks that belong to case instances with the given
            business key.
          nullable: true
        caseInstanceBusinessKeyLike:
          type: string
          description: "Restrict to tasks that have a case instance business key that
            has the parameter value \nas a substring."
          nullable: true
        caseDefinitionId:
          type: string
          description: Restrict to tasks that belong to a case definition with the given
            id.
          nullable: true
        caseDefinitionKey:
          type: string
          description: Restrict to tasks that belong to a case definition with the given
            key.
          nullable: true
        caseDefinitionName:
          type: string
          description: Restrict to tasks that belong to a case definition with the given
            name.
          nullable: true
        caseDefinitionNameLike:
          type: string
          description: "Restrict to tasks that have a case definition name that has the
            parameter value as a \n substring."
          nullable: true
        caseExecutionId:
          type: string
          description: Restrict to tasks that belong to a case execution with the given
            id.
          nullable: true
        activityInstanceIdIn:
          type: array
          description: "Only include tasks which belong to one of the passed and comma-separated
            activity \n instance ids."
          nullable: true
          items:
            type: string
        tenantIdIn:
          type: array
          description: "Only include tasks which belong to one of the passed and comma-separated
            \n tenant ids."
          nullable: true
          items:
            type: string
        withoutTenantId:
          type: boolean
          description: "Only include tasks which belong to no tenant. Value may only be
            `true`, \nas `false` is the default behavior."
          nullable: true
          default: false
        assignee:
          type: string
          description: Restrict to tasks that the given user is assigned to.
          nullable: true
        assigneeExpression:
          type: string
          description: "Restrict to tasks that the user described by the given expression
            is assigned to. See the\n[user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            \n for more information on available functions."
          nullable: true
        assigneeLike:
          type: string
          description: "Restrict to tasks that have an assignee that has the parameter
            \n value as a substring."
          nullable: true
        assigneeLikeExpression:
          type: string
          description: "Restrict to tasks that have an assignee that has the parameter
            value described by the \n given expression as a substring. See the \n[user
            guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            \n for more information on available functions."
          nullable: true
        assigneeIn:
          type: array
          description: Only include tasks which are assigned to one of the passed and
            comma-separated user ids.
          nullable: true
          items:
            type: string
        assigneeNotIn:
          type: array
          description: Only include tasks which are not assigned to one of the passed
            and comma-separated user ids.
          nullable: true
          items:
            type: string
        owner:
          type: string
          description: Restrict to tasks that the given user owns.
          nullable: true
        ownerExpression:
          type: string
          description: "Restrict to tasks that the user described by the given expression
            owns. See the \n[user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            \n for more information on available functions."
          nullable: true
        candidateGroup:
          type: string
          description: Only include tasks that are offered to the given group.
          nullable: true
        candidateGroupExpression:
          type: string
          description: "Only include tasks that are offered to the group described by
            the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            \n for more information on available functions."
          nullable: true
        candidateUser:
          type: string
          description: Only include tasks that are offered to the given user or to one
            of his groups.
          nullable: true
        candidateUserExpression:
          type: string
          description: "Only include tasks that are offered to the user described by the
            given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            \n for more information on available functions."
          nullable: true
        includeAssignedTasks:
          type: boolean
          description: "Also include tasks that are assigned to users in candidate queries.
            Default is to only \n include tasks that are not assigned to any user if you
            query by candidate user or\n group(s)."
          nullable: true
          default: false
        involvedUser:
          type: string
          description: "Only include tasks that the given user is involved in. A user
            is involved in a task if \nan identity link exists between task and user (e.g.,
            the user is the assignee)."
          nullable: true
        involvedUserExpression:
          type: string
          description: |-
            Only include tasks that the user described by the given expression is involved in.
            A user is involved in a task if an identity link exists between task and user
            (e.g., the user is the assignee). See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions.
          nullable: true
        assigned:
          type: boolean
          description: If set to `true`, restricts the query to all tasks that are assigned.
          nullable: true
          default: false
        unassigned:
          type: boolean
          description: If set to `true`, restricts the query to all tasks that are unassigned.
          nullable: true
          default: false
        taskDefinitionKey:
          type: string
          description: Restrict to tasks that have the given key.
          nullable: true
        taskDefinitionKeyIn:
          type: array
          description: Restrict to tasks that have one of the given keys. The keys need
            to be in a comma-separated list.
          nullable: true
          items:
            type: string
        taskDefinitionKeyLike:
          type: string
          description: Restrict to tasks that have a key that has the parameter value
            as a substring.
          nullable: true
        name:
          type: string
          description: Restrict to tasks that have the given name.
          nullable: true
        nameNotEqual:
          type: string
          description: Restrict to tasks that do not have the given name.
          nullable: true
        nameLike:
          type: string
          description: Restrict to tasks that have a name with the given parameter value
            as substring.
          nullable: true
        nameNotLike:
          type: string
          description: |-
            Restrict to tasks that do not have a name with the given parameter
            value as substring.
          nullable: true
        description:
          type: string
          description: Restrict to tasks that have the given description.
          nullable: true
        descriptionLike:
          type: string
          description: |-
            Restrict to tasks that have a description that has the parameter
            value as a substring.
          nullable: true
        priority:
          type: integer
          description: Restrict to tasks that have the given priority.
          format: int32
          nullable: true
        maxPriority:
          type: integer
          description: Restrict to tasks that have a lower or equal priority.
          format: int32
          nullable: true
        minPriority:
          type: integer
          description: Restrict to tasks that have a higher or equal priority.
          format: int32
          nullable: true
        dueDate:
          type: string
          description: |-
            Restrict to tasks that are due on the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
          format: date-time
          nullable: true
        dueDateExpression:
          type: string
          description: |-
            Restrict to tasks that are due on the date described by the given expression. See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        dueAfter:
          type: string
          description: |-
            Restrict to tasks that are due after the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
          format: date-time
          nullable: true
        dueAfterExpression:
          type: string
          description: |-
            Restrict to tasks that are due after the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        dueBefore:
          type: string
          description: |-
            Restrict to tasks that are due before the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
          format: date-time
          nullable: true
        dueBeforeExpression:
          type: string
          description: |-
            Restrict to tasks that are due before the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        withoutDueDate:
          type: boolean
          description: "Only include tasks which have no due date. Value may only be `true`,
            \nas `false` is the default behavior."
          nullable: true
          default: false
        followUpDate:
          type: string
          description: |-
            Restrict to tasks that have a followUp date on the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date
            must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
          format: date-time
          nullable: true
        followUpDateExpression:
          type: string
          description: |-
            Restrict to tasks that have a followUp date on the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        followUpAfter:
          type: string
          description: |-
            Restrict to tasks that have a followUp date after the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
          format: date-time
          nullable: true
        followUpAfterExpression:
          type: string
          description: |-
            Restrict to tasks that have a followUp date after the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        followUpBefore:
          type: string
          description: |-
            Restrict to tasks that have a followUp date before the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
          nullable: true
        followUpBeforeExpression:
          type: string
          description: |-
            Restrict to tasks that have a followUp date before the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        followUpBeforeOrNotExistent:
          type: string
          description: |-
            Restrict to tasks that have no followUp date or a followUp date before the given date.
            By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case
            is to query all `active` tasks for a user for a given date.
          format: date-time
          nullable: true
        followUpBeforeOrNotExistentExpression:
          type: string
          description: |-
            Restrict to tasks that have no followUp date or a followUp date before the date
            described by the given expression. See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        createdOn:
          type: string
          description: |-
            Restrict to tasks that were created on the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
          format: date-time
          nullable: true
        createdOnExpression:
          type: string
          description: |-
            Restrict to tasks that were created on the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        createdAfter:
          type: string
          description: |-
            Restrict to tasks that were created after the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must
            have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
          format: date-time
          nullable: true
        createdAfterExpression:
          type: string
          description: |-
            Restrict to tasks that were created after the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        createdBefore:
          type: string
          description: |-
            Restrict to tasks that were created before the given date. By
            [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must
            have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
          format: date-time
          nullable: true
        createdBeforeExpression:
          type: string
          description: |-
            Restrict to tasks that were created before the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
          nullable: true
        delegationState:
          type: string
          description: |-
            Restrict to tasks that are in the given delegation state. Valid values are
            `PENDING` and `RESOLVED`.
          nullable: true
          enum:
            - PENDING
            - RESOLVED
        candidateGroups:
          type: array
          description: |-
            Restrict to tasks that are offered to any of the given candidate groups. Takes a
            comma-separated list of group names, so for example
            `developers,support,sales`.
          nullable: true
          items:
            type: string
        candidateGroupsExpression:
          type: string
          description: |-
            Restrict to tasks that are offered to any of the candidate groups described by the
            given expression. See the
            [user guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to
            `java.util.List` of Strings.
          nullable: true
        withCandidateGroups:
          type: boolean
          description: |-
            Only include tasks which have a candidate group. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        withoutCandidateGroups:
          type: boolean
          description: |-
            Only include tasks which have no candidate group. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        withCandidateUsers:
          type: boolean
          description: |-
            Only include tasks which have a candidate user. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        withoutCandidateUsers:
          type: boolean
          description: |-
            Only include tasks which have no candidate users. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        active:
          type: boolean
          description: |-
            Only include active tasks. Value may only be `true`, as `false`
            is the default behavior.
          nullable: true
          default: false
        suspended:
          type: boolean
          description: |-
            Only include suspended tasks. Value may only be `true`, as
            `false` is the default behavior.
          nullable: true
          default: false
        taskVariables:
          type: array
          description: |-
            A JSON array to only include tasks that have variables with certain values. The
            array consists of JSON objects with three properties `name`, `operator` and `value`.
            `name` is the variable name, `operator` is the comparison operator to be used and
            `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.
            
            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          nullable: true
          items:
            type: string
        processVariables:
          type: array
          description: |-
            A JSON array to only include tasks that belong to a process instance with variables
            with certain values. The array consists of JSON objects with three properties
            `name`, `operator` and `value`. `name` is the variable name, `operator` is the
            comparison operator to be used and `value` the variable value. `value` may be of
            type `String`, `Number` or `Boolean`.
            
            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`;
            `notLike`.
            `key` and `value` may not contain underscore or comma characters.
          nullable: true
          items:
            type: string
        caseInstanceVariables:
          type: array
          description: |-
            A JSON array to only include tasks that belong to a case instance with variables
            with certain values. The array consists of JSON objects with three properties
            `name`, `operator` and `value`. `name` is the variable name, `operator` is the
            comparison operator to be used and `value` the variable value. `value` may be of
            type `String`, `Number` or `Boolean`.
            
            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          nullable: true
          items:
            type: string
        variableNamesIgnoreCase:
          type: boolean
          description: |-
            Match all variable names in this query case-insensitively. If set
            `variableName` and `variablename` are treated as equal.
          nullable: true
          default: false
        variableValuesIgnoreCase:
          type: boolean
          description: |-
            Match all variable values in this query case-insensitively. If set
            `variableValue` and `variablevalue` are treated as equal.
          nullable: true
          default: false
        parentTaskId:
          type: string
          description: Restrict query to all tasks that are sub tasks of the given task.
            Takes a task id.
          nullable: true
        orQueries:
          type: array
          description: |-
            A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills
            *at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).
            
            All task query properties can be used except for: `sorting`, `withCandidateGroups`,
            `withoutCandidateGroups`, `withCandidateUsers`, `withoutCandidateUsers`
            
            See the [User guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/process-engine-api/#or-queries)
            for more information about OR queries.
          nullable: true
          items:
            $ref: '#/components/schemas/TaskQueryDto'
        sorting:
          type: array
          description: Apply sorting of the result
          nullable: true
          items:
            type: string
        taskId:
          type: string
        rootProcessInstanceId:
          type: string
      description: A Task query which defines a group of Tasks.

    DdmTaskQueryDto:
      type: object
      description: DTO that represents a set of query parameters to find user tasks
      properties:
        taskId:
          type: string
          example: c3436d47-6b47-498d-89c6-4f65510a1735
          nullable: true
          default: null
          description: Defines if task with specific taskId has to be found.
        assignee:
          type: string
          example: some_username
          nullable: true
          default: null
          description: Defines if tasks assigned on specific user have to be found.
        unassigned:
          type: boolean
          example: false
          nullable: true
          default: false
          description: Defines if only tasks that don't have assignee have to found.
        processInstanceId:
          type: string
          example: 09c079eb-fea0-4d07-b450-86348840df1f
          nullable: true
          default: null
          description: Defines if tasks of specific process instance have to be found.
        rootProcessInstanceId:
          type: string
          example: 09c079eb-fea0-4d07-b450-86348840df1f
          nullable: true
          default: null
          description: Defines if tasks of this process instance or its subprocesses have to be found.
        orQueries:
          type: array
          example: null
          nullable: true
          default: null
          description: |
            A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills
            *at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).
            
            All task query properties can be used except for: `sorting`
            
            See the [User guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/process-engine-api/#or-queries)
            for more information about OR queries.
          items:
            $ref: '#/components/schemas/DdmTaskQueryDto'
        processInstanceIdIn:
          type: array
          example: [09c079eb-fea0-4d07-b450-86348840df1f]
          nullable: true
          default: null
          description: Defines if tasks of specific process instances have to be found.
          items:
            type: string
        sorting:
          type: object
          nullable: true
          default: null
          description: DTO that represents set of sorting query parameters
          properties:
            sortBy:
              type: string
              example: created
              nullable: true
              description: Specifies the field to sort the tasks by. Can be null.
              enum:
                - instanceId
                - caseInstanceId
                - dueDate
                - followUpDate
                - executionId
                - caseExecutionId
                - assignee
                - created
                - description
                - id
                - name
                - nameCaseInsensitive
                - priority
                - tenantId
                - processVariable
                - executionVariable
                - taskVariable
                - caseInstanceVariable
                - caseExecutionVariable
            sortOrder:
              type: string
              example: asc
              nullable: true
              default: null
              description: Specifies the order in which the tasks should be sorted. Can be null. Cannot work without sortBy.
              enum:
                - asc
                - desc
                - null

    DdmLightweightTaskDto:
      type: object
      properties:
        id:
          type: string
          example: 9402afe5-ce88-4af4-be0b-5035bbe47722
          nullable: false
          description: Represents the unique identifier of the task.
        assignee:
          type: string
          example: some_username
          nullable: true
          description: Represents the username of a user that assigned to the task.

    DdmSignableTaskDto:
      type: object
      description: DTO that represents a user task that may require digital signature.
      properties:
        id:
          type: string
          nullable: false
          example: fa1fdc6e-361a-4236-8d9e-a7ce126a03a5
          description: Represents the ID of the task.
        taskDefinitionKey:
          type: string
          nullable: false
          example: signable-task
          description: Represents the key of the task that is defined in process definition.
        name:
          type: string
          nullable: false
          example: Signable task
          description: Represents the human readable name of the task.
        assignee:
          type: string
          nullable: true
          example: some_username
          description: Represents the username of a user that assigned to the task.
        created:
          type: string
          format: date-time
          nullable: false
          description: Represents the date and time when the task was created.
        description:
          type: string
          nullable: true
          example: null
          description: Represents the description of the task.
        processDefinitionName:
          type: string
          example: Awesome process definition
          nullable: false
          description: Represents the human readable name of the process definition associated with the task.
        processInstanceId:
          type: string
          example: 31b15466-2743-438a-b4cb-fa1a7d1478e9
          nullable: false
          description: Represents the unique identifier of the process instance associated with the task.
        rootProcessInstanceId:
          type: string
          example: 31b15466-2743-438a-b4cb-fa1a7d1478e9
          nullable: false
          description: Represents the unique identifier of the root process instance associated with the task. (Can be same as processInstanceId)
        processDefinitionId:
          type: string
          example: awesome-process-definition:5:9b1d903c-51bc-41b0-b5bc-360362e0d7cb
          nullable: false
          description: Represents the unique identifier of the process definition associated with the task.
        formKey:
          type: string
          example: awesome-task-form
          nullable: false
          description: Represents the form key associated with the task.
        suspended:
          type: boolean
          example: false
          nullable: false
          description: Represents the status of the task (suspended or not).
        eSign:
          type: boolean
          example: true
          nullable: false
          description: Represents whether the task requires digital signature.
        signatureValidationPack:
          type: array
          example: [ENTREPRENEUR, LEGAL]
          nullable: true
          description: Represents a set of subjects used for signature validation.
          items:
            type: string
            enum: [INDIVIDUAL, ENTREPRENEUR, LEGAL]
        formVariables:
          type: object
          nullable: true
          example: {"formVariable1": "formVariableValue", "formVariable2": "formVariableValue2"}
          description: Represents a map of form variables associated with the task.

    DdmCompleteTaskDto:
      type: object
      description: DTO that represents the data required to complete a task in a business process management system (BPMS).
      properties:
        variables:
          type: object
          nullable: true
          default: null
          description: Represents the variables needed for the completed task. Each task may have it's own set of variables.
          additionalProperties:
            $ref: '#/components/schemas/DdmVariableValueDto'
        withVariablesInReturn:
          type: boolean
          nullable: false
          default: false
          description: Indicates whether the variables should be included in the response or not.

    DdmCompletedTaskDto:
      type: object
      properties:
        id:
          type: string
          nullable: false
          example: fa1fdc6e-361a-4236-8d9e-a7ce126a03a5
          description: Represents the ID of the task.
        processInstanceId:
          type: string
          example: 31b15466-2743-438a-b4cb-fa1a7d1478e9
          nullable: false
          description: Represents the unique identifier of the process instance associated with the task.
        rootProcessInstanceId:
          type: string
          example: 31b15466-2743-438a-b4cb-fa1a7d1478e9
          nullable: false
          description: Represents the unique identifier of the root process instance associated with the task. (Can be same as processInstanceId)
        rootProcessInstanceEnded:
          type: boolean
          example: true
          nullable: false
          description: Indicates whether root process instance is ended.
        variables:
          type: object
          example: null
          description: Represents process variables. Will be null if request doesn't contain withVariablesInReturn or it's false.
          additionalProperties:
            $ref: '#/components/schemas/DdmVariableValueDto'

    DdmVariableValueDto:
      type: object
      description: DTO that represents a variable value in a process engine
      properties:
        type:
          type: string
          example: string
          description: Indicates the type of the variable value.
        value:
          description: Holds the actual value of the variable. Can be any value.
        valueInfo:
          type: object
          additionalProperties:
            description: Can be any value.
          description: Stores additional information about the variable value in the form of a key-value map.

    ErrorDto:
      type: object
      description: DTO that represents the occurred error.
      example: { "traceId": "ac3bee6c5cdb10142947264715dd5559", "code":"500", "message": "Something went wrong", "localizedMessage": null }
      properties:
        traceId:
          type: string
          nullable: false
          example: ac3bee6c5cdb10142947264715dd5559
          description: Request ID that is read from X-B3-TraceId request header if present or else is generated new one.
        code:
          type: string
          nullable: false
          description: The code of an occurred error.
        message:
          type: string
          nullable: false
          description: The message of an occurred error.
        localizedMessage:
          type: string
          nullable: true
          description: The message of an occurred error based on servers locale. May be null.

    ClientValidationException:
      type: object
      description: Represent a validation error that occurs on the client side
      properties:
        traceId:
          type: string
          nullable: false
          example: ac3bee6c5cdb10142947264715dd5559
          description: Request ID that is read from X-B3-TraceId request header if present or else is generated new one.
        code:
          type: string
          nullable: false
          description: The code of an occurred error.
        details:
          $ref: '#/components/schemas/ErrorsListDto'

    ErrorsListDto:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetailDto'

    ErrorDetailDto:
      type: object
      properties:
        message:
          type: string
          nullable: false
          example: "Value cannot be null"
          description: The message of an occurred error.
        field:
          type: string
          nullable: false
          example: "nonNullableField"
          description: The field name where an error occurred.
        value:
          type: string
          nullable: false
          example: null
          description: The field value where an error occurred.
